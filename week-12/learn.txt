                      --------------Working with Kubernetes Objects--------------



Required Fields
#In the .yaml file for the Kubernetes object you want to create, you'll need to set values for the following fields:

"apiVersion" - Which version of the Kubernetes API you're using to create this object
"kind" - What kind of object you want to create
"metadata" - Data that helps uniquely identify the object, including a name string, UID, and optional namespace
"spec" - What state you desire for the object

code:kubectl apply -f https://k8s.io/examples/application/deployment.yaml

-----------------------
Imperative commands 
#This is the recommended way to get started or to run a one-off task in a cluster. Because this technique operates directly on live objects, it provides no history of previous configurations.

    Run an instance of the nginx container by creating a Deployment object:

        - kubectl create deployment nginx --image nginx
Imperative object configuration
    Create the objects defined in a configuration file:

        - kubectl create -f nginx.yaml
    Delete the objects defined in two configuration files:

        - kubectl delete -f nginx.yaml -f redis.yaml
    Update the objects defined in a configuration file by overwriting the live configuration:

        - kubectl replace -f nginx.yaml
----------------------------------Object Names and IDs----------------------

Each object in your cluster has a Name that is unique for that type of resource. Every Kubernetes object also has a UID that is unique across your whole cluster.

For example, you can only have one Pod named myapp-1234 within the same namespace, but you can have one Pod and one Deployment that are each named myapp-1234.

For non-unique user-provided attributes, Kubernetes provides labels and annotations

    Path Segment Names
        Some resource types require their names to be able to be safely encoded as a path segment. In other words, the name may not be "." or ".." and the name may not contain "/" or "%".

            Here's an example manifest for a Pod named nginx-demo.

                apiVersion: v1
                kind: Pod
                metadata:
                name: nginx-demo
                spec:
                containers:
                - name: nginx
                    image: nginx:1.14.2
                    ports:
                    - containerPort: 80
-----------------------------Namespace----------------------
Namespaces
In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster. 
Names of resources need to be unique within a namespace, but not across namespaces. 
Namespace-based scoping is applicable only for namespaced objects (e.g. Deployments, Services, etc) 
and not for cluster-wide objects (e.g. StorageClass, Nodes, PersistentVolumes, etc).
    

    -- Working with Namespaces 
    Viewing Namespaces
        - kubectl get namespace

    Setting the namespace for a request
        - kubectl run nginx --image=nginx --namespace=<insert-namespace-name-here>
        - kubectl get pods --namespace=<insert-namespace-name-here>

***https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set


https://kubernetes.io/docs/concepts/overview/working-with-objects/